@using AnteyaVIP.Web.Areas.Administration.ViewModels.Products;
@using AnteyaVIP.Web.Areas.Administration.ViewModels.Categories;
@using AnteyaVIP.Web.Areas.Administration.ViewModels.Manufacturers;
@using AnteyaVIP.Web.Areas.Administration.ViewModels.Characteristics;
@using AnteyaVIP.Web.Areas.Administration.ViewModels.Pictures;
@using AnteyaVIP.Web.Infrastructure.Populators;
@model KendoDropDownListPopulator
@{
    const string ControllerName = "Products";
    ViewBag.Title = ControllerName;
}

<h2>Index</h2>
@(Html.FullFeaturedGrid<ProductInputModel>(m => m.Id, ControllerName, columns =>
{
    columns.Bound(p => p.Id);
    columns.Bound(p => p.Name);
    columns.Bound(p => p.Description).Width(200);
    columns.Bound(p => p.Price);
    columns.Bound(p => p.ProductStatus);
    columns.ForeignKey(p => p.CategoryId, Model.Categories, "Id", "Name").Width(300).EditorTemplateName("CategoryId");
    columns.ForeignKey(p => p.ManufacturerId, Model.Manufacturers, "Id", "Name").Width(300).EditorTemplateName("ManufacturerId");
    columns.Bound(p => p.CreatedOn).Hidden();
    columns.Bound(p => p.ModifiedOn).Hidden();
    //columns.Command(com => com.Custom("Images").Click("showDetails"));
    columns.Command(com => com.Edit()).Title("Edit");
    columns.Command(com => com.Destroy()).Title("Delete");
}, new { productId = "#=Id#" }).ClientDetailTemplateId("characteristics-template"))

@*(@Html.FullFeaturedPopUpWindow("Details", "Product Images"))*@


<script type="text/x-kendo-template" id="characteristics-template">
    @(Html.Kendo().TabStrip()
            .Name("tabStrip_#=Id#")
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
            .Items(items =>
            {
                items.Add().Text("Characteristics").Content(@<text>
                    @(Html.Kendo().Grid<CharacteristicViewModel>()
                            .Name("CharacteristicsGrid_#=Id#")
                            .Columns(columns =>
                            {
                                columns.AutoGenerate(true);
                                columns.Command(c => c.Edit());
                                columns.Command(c => c.Destroy());
                            })
                            .Pageable(page => page.Refresh(true))
                            .Sortable()
                            .Groupable()
                            .Filterable()
                            .Editable(edit => edit.Mode(GridEditMode.PopUp))
                            .ToolBar(toolbar => toolbar.Create())
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .PageSize(10)
                                .Model(model => model.Id(p => p.Id))
                                .Read(read => read.Action("Read_ProductCharacteristics", "Characteristics", new { productId = "#=Id#" }))
                                .Create(create => create.Action("Create", "Characteristics", new { productId = "#=Id#" }))
                                .Update(update => update.Action("Update", "Characteristics"))
                                .Destroy(destroy => destroy.Action("Destroy", "Characteristics"))
                            )
                            .ToClientTemplate()
                    )
                </text>
                );
                items.Add().Text("Images").Content(@<text>
                    @(Html.Kendo().Grid<PictureViewModel>()
                        .Name("ImageGrid_#=Id#")
                        .Columns(columns =>
                        {
                            columns.Bound(p => p.Id).ClientTemplate("<img src='" + Url.Content("~/Pictures/Picture/") + "\\#:Id\\#' alt='#=Id #' Title='#=Id #' height='62' width='62' />").HtmlAttributes(new { @class = "image_in_kendo_grid" });
                            columns.Command(com => com.Destroy()).Title("Delete");
                        })
                        .Pageable(page => page.Refresh(true))
                        .Sortable()
                        .Editable(edit => edit.Mode(GridEditMode.PopUp))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(10)
                            .Model(model => model.Id(p => p.Id))
                            .Read(read => read.Action("Read_ProductPictures", "Pictures", new { productId = "#=Id#" }))
                            .Destroy(destroy => destroy.Action("Destroy", "Pictures"))
                        )
                        .ToClientTemplate()
                    )

                    @(Html.Kendo().Upload()
                        .Name("UploadedFiles")
                        .Multiple(true)
                        .Async(async => async.Save("Create", "Pictures", new { productId = "#=Id#" }).AutoUpload(true))
                        .ToClientTemplate()
                    )
                </text>
                );
            })
            .ToClientTemplate())

</script>

@*<script type="text/javascript">
    var detailsTemplate = kendo.template($("#image-upload-template").html());

    function showDetails(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var wnd = $("#Details").data("kendoWindow");

        wnd.content(detailsTemplate(dataItem));
        wnd.center().open();
    }
</script>*@

<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }
</script>